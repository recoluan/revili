import{_ as i,r as p,o as c,c as o,b as n,d as s,e as a,w as r,a as e}from"./app-B9x98SZo.js";const d={},u=e(`<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>If your kit is to be published to npm, please refer to <strong>Standard Kit</strong>; if your kit is only used in your own project, please refer to <strong>Local Kit</strong>.</p></div><h2 id="standard-kit" tabindex="-1"><a class="header-anchor" href="#standard-kit"><span>Standard Kit</span></a></h2><h3 id="initialization" tabindex="-1"><a class="header-anchor" href="#initialization"><span>Initialization</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">├── dist</span>
<span class="line">│   ├── node</span>
<span class="line">│   │   └── index.js</span>
<span class="line">│   └── client</span>
<span class="line">│   │   ├── main.js</span>
<span class="line">│   │   └── App.vue</span>
<span class="line">└── src</span>
<span class="line">    ├── node</span>
<span class="line">    │   └── index.ts</span>
<span class="line">    └── client</span>
<span class="line">        ├── main.ts</span>
<span class="line">        └── App.vue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> revili@next <span class="token parameter variable">-g</span></span>
<span class="line">revili create:kit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="development" tabindex="-1"><a class="header-anchor" href="#development"><span>Development</span></a></h3><p>套件的开发分为两部分，<strong>自定义命令</strong> 和 <strong>GUI</strong>。</p><p>两者本身是独立的，不相互依赖，可以根据用户习惯只开发其中一种能力；同时也可以作为相通功能的不同表现形式，让用户根据自己的习惯或兴趣去选择使用方式。</p><p><code>Revili</code> 采用约定大于规范的原则，对套件的文件结构进行了约束：</p>`,9),k=n("code",null,"node",-1),v=n("code",null,"defineKit",-1),m=n("li",null,[n("code",null,"client"),s(" 文件夹：放置 GUI 的用户操作界面相关的代码。")],-1),g=n("h4",{id:"自定义命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#自定义命令"},[n("span",null,"自定义命令")])],-1),b=n("code",null,"registerCommand",-1),h=n("code",null,"registerCommand",-1),f={href:"https://github.com/cacjs/cac",target:"_blank",rel:"noopener noreferrer"},y=e(`<p><strong>registerCommand</strong></p><ul><li>类型签名：<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token punctuation">(</span><span class="token punctuation">{</span> program<span class="token operator">:</span> <span class="token constant">CAC</span><span class="token punctuation">,</span> appConfig<span class="token operator">:</span> AppConfig <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>示例：<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineKit<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Kit</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;revili/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> demoKit<span class="token operator">:</span> Kit <span class="token operator">=</span> <span class="token function">defineKit</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;revili-kit-demo&#39;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">registerCommand</span><span class="token punctuation">(</span>program<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    program<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你触发了 test 命令！&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> demoKit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="gui" tabindex="-1"><a class="header-anchor" href="#gui"><span>GUI</span></a></h4><p>GUI 开发又分为两部分，<strong>用户操作界面</strong> 和 <strong>本地通信服务</strong>。</p><h5 id="用户操作界面" tabindex="-1"><a class="header-anchor" href="#用户操作界面"><span>用户操作界面</span></a></h5><p>通过 <code>webFramework</code> 指定用户操作界面的技术栈，当前仅支持 <code>vue</code>，后面会支持 <code>react</code>、<code>servlet</code>、<code>web component</code> 等。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineKit<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Kit</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;revili/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> demoKit<span class="token operator">:</span> Kit <span class="token operator">=</span> <span class="token function">defineKit</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;revili-kit-demo&#39;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  webFramework<span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> demoKit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),w=n("code",null,"client",-1),x=n("code",null,"main.(ts|js)",-1),_=n("code",null,"viteOptions",-1),K={href:"https://vitejs.dev/config/",target:"_blank",rel:"noopener noreferrer"},j=e(`<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineKit<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Kit</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;revili/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> demoKit<span class="token operator">:</span> Kit <span class="token operator">=</span> <span class="token function">defineKit</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;revili-kit-demo&#39;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  webFramework<span class="token operator">:</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  viteOptions<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> demoKit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="本地通信服务" tabindex="-1"><a class="header-anchor" href="#本地通信服务"><span>本地通信服务</span></a></h5><p>通过 <code>registerService</code> 注册与用户操作界面进行通信的本地服务，通过 <code>useServerSocket</code> 与用户操作界面进行通信。</p><p><strong>registerService</strong></p><ul><li>类型签名：<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token punctuation">(</span>server<span class="token operator">:</span> ViteDevServer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>示例：<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineKit<span class="token punctuation">,</span> useServerSocket<span class="token punctuation">,</span> <span class="token keyword">type</span> <span class="token class-name">Kit</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;revili/node&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> demoKit<span class="token operator">:</span> Kit <span class="token operator">=</span> <span class="token function">defineKit</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;revili-kit-demo&#39;</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">  <span class="token function-variable function">registerService</span><span class="token operator">:</span> server <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">useServerSocket</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 监听用户操作界面发来的指令 client:message</span></span>
<span class="line">    socket<span class="token operator">?.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;client:message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">&#39;USER_PATH&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> userPath <span class="token operator">=</span> <span class="token function">getUserPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 发送服务端指令 server:message</span></span>
<span class="line">        socket<span class="token operator">?.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;server:message&#39;</span><span class="token punctuation">,</span> userPath<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> demoKit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>在用户操作界面，通过 <code>useClientSocket</code> 与本地服务进行通信。</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useClientSocket <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;revili/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">useClientSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> msgFromServer <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;click button to get&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 监听本地服务发来的指令 server:message</span></span>
<span class="line">socket<span class="token operator">?.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;server:message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">data</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  msgFromServer<span class="token punctuation">.</span>value <span class="token operator">=</span> data</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">getCurrnetPath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 向本地服务发送指令 client:message</span></span>
<span class="line">  socket<span class="token operator">?.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;client:message&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;USER_PATH&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getCurrnetPath<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>get user path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>user path: {{ msgFromServer }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="调试" tabindex="-1"><a class="header-anchor" href="#调试"><span>调试</span></a></h3><p>标准套件的产物存放在 <code>dist</code> 文件夹下，所以在需要在套件根目录执行命令时添加 <code>--dir=./dist</code> 参数。</p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>用户操作界面的修改不需要重启服务，本地通信服务的修改需要重新执行 start 命令。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 代码实时编译</span></span>
<span class="line"><span class="token function">npm</span> run dev</span>
<span class="line"></span>
<span class="line"><span class="token comment"># GUI 调试</span></span>
<span class="line">revili start <span class="token parameter variable">--dir</span><span class="token operator">=</span>./dist</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 命令调试</span></span>
<span class="line">revili command-registered-by-kit <span class="token parameter variable">--dir</span><span class="token operator">=</span>./dist</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为增加了 <code>--dir</code> 参数，需要对该参数进行处理：</p><ol><li>增加 <code>--dir</code> 参数的定义<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">program</span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;cunstom-command&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">&#39;--dir &lt;dir&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Specify the entry file path for kit&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// ...</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>设置允许未知的参数<div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="line">program</span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;cunstom-command&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">allowUnknownOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// ...</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="发布" tabindex="-1"><a class="header-anchor" href="#发布"><span>发布</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 编译</span></span>
<span class="line"><span class="token function">npm</span> run build</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 发布</span></span>
<span class="line"><span class="token function">npm</span> run publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="local-kit" tabindex="-1"><a class="header-anchor" href="#local-kit"><span>Local Kit</span></a></h2><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">├── node</span>
<span class="line">│   └── index.js</span>
<span class="line">└── client</span>
<span class="line">    ├── main.js</span>
<span class="line">    └── App.vue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开发" tabindex="-1"><a class="header-anchor" href="#开发"><span>开发</span></a></h3><p>参考 <strong>标准套件</strong>。</p><h3 id="调试-1" tabindex="-1"><a class="header-anchor" href="#调试-1"><span>调试</span></a></h3><p>本地套件的文件存放在根目录文件夹下，所以在需要在套件根目录执行命令时添加 <code>--dir=./</code> 参数。</p><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>用户操作界面的修改不需要重启服务，本地通信服务的修改需要重新执行 start 命令。</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># GUI 调试</span></span>
<span class="line">revili start <span class="token parameter variable">--dir</span><span class="token operator">=</span>./</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 命令调试</span></span>
<span class="line">revili command-registered-by-kit <span class="token parameter variable">--dir</span><span class="token operator">=</span>./</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为增加了 <code>--dir</code> 参数，需要对该参数进行处理，具体请参考 <strong>标准套件</strong>。</p><h3 id="发布-1" tabindex="-1"><a class="header-anchor" href="#发布-1"><span>发布</span></a></h3><p>无需关注。</p>`,27);function S(C,I){const l=p("RouteLink"),t=p("ExternalLinkIcon");return c(),o("div",null,[u,n("ul",null,[n("li",null,[k,s(" 文件夹：放置套件的实例，通过 "),v,s(" 对套件进行声明，用来注册自定义命令和 GUI 的本地通信服务等，详情请参考 "),a(l,{to:"/zh/docs/api/node-api.html"},{default:r(()=>[s("Node API")]),_:1}),s("；")]),m]),g,n("p",null,[s("通过 "),b,s(" 注册自定义命令，"),h,s(" 对外暴露了 "),n("a",f,[s("CAC"),a(t)]),s(" 实例。")]),y,n("p",null,[s("在 "),w,s(" 文件夹中对 Web 应用进行开发，这里就和传统 Web 开发没有任何什么区别了，注意入口文件约定使用 "),x,s("。如果想对开发环境进行自定义，通过 "),_,s(" 进行配置即可，配置详情参考 "),n("a",K,[s("Vite"),a(t)]),s("。")]),j])}const A=i(d,[["render",S],["__file","kit.html.vue"]]),N=JSON.parse('{"path":"/docs/guide/kit.html","title":"Develop Kit","lang":"en-US","frontmatter":{"title":"Develop Kit"},"headers":[{"level":2,"title":"Standard Kit","slug":"standard-kit","link":"#standard-kit","children":[{"level":3,"title":"Initialization","slug":"initialization","link":"#initialization","children":[]},{"level":3,"title":"Development","slug":"development","link":"#development","children":[]},{"level":3,"title":"调试","slug":"调试","link":"#调试","children":[]},{"level":3,"title":"发布","slug":"发布","link":"#发布","children":[]}]},{"level":2,"title":"Local Kit","slug":"local-kit","link":"#local-kit","children":[{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"开发","slug":"开发","link":"#开发","children":[]},{"level":3,"title":"调试","slug":"调试-1","link":"#调试-1","children":[]},{"level":3,"title":"发布","slug":"发布-1","link":"#发布-1","children":[]}]}],"git":{"createdTime":1719285774000,"updatedTime":1719285774000,"contributors":[{"name":"Reco","email":"recoluan@qq.com","commits":1}]},"filePathRelative":"docs/guide/kit.md"}');export{A as comp,N as data};
